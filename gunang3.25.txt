@name GunAng3.25
@inputs Gun:wirelink CamController:wirelink Chair:entity EGP:wirelink
@outputs Angles:angle
@persist AngleU:number AngleD:number Angles:angle Target:vector2 Locality:vector2 DistX:number DistY:number EPos:vector Yaw:number Grav:number Veloc:number GunMeanAngles:angle GunMoveSpeed:number
@persist FB:number LR:number UD:number CamPos:vector CamMax:number Chair:entity Active:number Driver:entity DirectionFlicker:number
@persist GunE:entity Fire:number Inactive:number FireLocation:vector
@persist True False EGPSIZE:vector2
@persist Sizes:table Colors:table Positions:table Type:table Controls:table Configurations:table
runOnTick(1)

if((first()||dupefinished())||changed(Driver)){
    DirectionFlicker = 0
    Driver = Chair:driver()

    #Controls
    Controls["Up",string] = "Space"
    Controls["Down",string] = "LSHIFT"
    Controls["Left",string] = "A"
    Controls["Right",string] = "D"
    Controls["Forward",string] = "W"
    Controls["Back",string] = "S"
    Controls["Fire",string] = "mouse_left"
    Controls["Speed Up",string] = "LALT"
    Controls["Up Toggle",string] = "T"
    Controls["Down Toggle",string] = "G"

    Configurations["Base Speed",number] = 5
    Configurations["Speed Up Speed",number] = 15
    Configurations["Cam Height At Start",number] = 1000


    EGPSIZE = egpScrSize(Driver)

    # Options are
    # BCircle (a big circle in the center),
    # ICircle ( a smaller circle in center ),
    # HLine (a line horizontally that goes from left to right),
    # VLine ( a verticle line through center from top to bottom)
    # TVBPost ( a tpost coming from Bottom ),
    # TVTPost ( tpost coming from top )
    # THLPost (tpost from left)
    # THRPost (Tpost from right),
    # TVBFPost ( a flat tpost coming from Bottom ),
    # TVTFPost ( flat tpost coming from top )
    # THLFPost (flat tpost from left)
    # THRFPost (flat Tpost from right),
    Type["Crosshair",string] = "BCircle ICircle THRPost THLPost TVTPost TVBPost"

#/**
    #options are
    # XTPos Your aimpoint's x position
    # YTPos Your aimpoint's y position
    # ZTPos Your aimpoint's z position
    # XPPos The Gun's X position
    # YPPos The Gun's Y position
    # ZPPos The Gun's Z position
    # RXTPos The Aimpoint's x position relative to the gun
    # RYTPos The Aimpoint's y position relative to the gun
    # RZTPos The Aimpoint's z position relative to the gun
    # MaxDistance The Gun's Max Distance
    # CurDistance The Aimpoint's current distance from the gun
    # WantedPitchNum The wanted pitch
    # CurrentPitchNum The current pitch
    # LowPitchNum The pitch wanted if it was low arcs
    # HighPitchNum The Pitch wanted if it was high arcs
    # WantedPitchVis The wanted pitch, but visually
    # CurrentPitchVis The current pitch but visually
    # LowPitchVis The low arc pitch but visual
    # HighPitchVis The high arc pitch but visual
    # TargetInAreaList The List of targets in an area around aimpoint
    # TargetInAreaVis The targets in area shown visually.
    # WantedYawNum The wanted yaw
    # CurrentYawNum the current yaw
    # WantedYawVis the wanted yaw but visually
    # CurrentYawVis The Current Yaw but visually.
#*/
    Type["Heads Up Info",string] = "XTPos YTPos ZTPos XPPos"


    Sizes["BCircle",vector] = vec(20,20,1)
    Sizes["ICircle",vector] = vec(10,10,1)
    Sizes["HLine",number] = 5
    Sizes["VLine",number] = 5
    Sizes["TVBPost",vector4] = vec4(EGPSIZE:y()/2,0,5,-15)
    Sizes["TVTPost",vector4] = vec4(EGPSIZE:y()/2,0,5,15)
    Sizes["THLPost",vector4] = vec4(EGPSIZE:x()/2,0,5,15)
    Sizes["THRPost",vector4] = vec4(EGPSIZE:x()/2,0,5,-15)
    Sizes["TVBFPost",vector] = vec(EGPSIZE:y()/2,20,5)
    Sizes["TVTFPost",vector] = vec(EGPSIZE:y()/2,20,5)
    Sizes["THLFPost",vector] = vec(EGPSIZE:x()/2,20,5)
    Sizes["THRFPost",vector] = vec(EGPSIZE:x()/2,20,5)

    Colors["BCircle",vector4] = vec4(255,0,0,255)
    Colors["ICircle",vector4] = vec4(255,0,0,255)
    Colors["HLine",vector4] = vec4(255,0,0,255)
    Colors["VLine",vector4] = vec4(255,0,0,255)
    Colors["TVBPost",vector4] = vec4(255,0,0,255)
    Colors["TVTPost",vector4] = vec4(255,0,0,255)
    Colors["THLPost",vector4] = vec4(255,0,0,255)
    Colors["THRPost",vector4] = vec4(255,0,0,255)
    Colors["TVBFPost",vector4] = vec4(255,0,0,255)
    Colors["TVTFPost",vector4] = vec4(255,0,0,255)
    Colors["THLFPost",vector4] = vec4(255,0,0,255)
    Colors["THRFPost",vector4] = vec4(255,0,0,255)

    Positions["BCircle",vector2] = vec2(0,0)
    Positions["ICircle",vector2] = vec2(0,0)
    Positions["HLine",vector4] = vec4(-EGPSIZE:x(),0,EGPSIZE:x(),0)
    Positions["VLine",vector4] = vec4(0,-EGPSIZE:y(),0,EGPSIZE:y())
    Positions["TVBPost",vector4] = vec4(0,EGPSIZE:y()/2,0,Sizes["TVBPost",vector4]:y())
    Positions["TVTPost",vector4] = vec4(0,-EGPSIZE:y()/2,0,-Sizes["TVTPost",vector4]:y())
    Positions["THLPost",vector4] = vec4(-EGPSIZE:x()/2,0,-Sizes["THLPost",vector4]:y(),0)
    Positions["THRPost",vector4] = vec4(EGPSIZE:x()/2,0,Sizes["THRPost",vector4]:y(),0)
    Positions["TVBFPost",vector4] = vec4(0,EGPSIZE:y()/2,0,Sizes["TVBFPost",vector]:y())
    Positions["TVTFPost",vector4] = vec4(0,-EGPSIZE:y()/2,0,-Sizes["TVTFPost",vector]:y())
    Positions["THLFPost",vector4] = vec4(-EGPSIZE:x()/2,0,-Sizes["THLFPost",vector]:y(),0)
    Positions["THRFPost",vector4] = vec4(EGPSIZE:x()/2,0,Sizes["THRFPost",vector]:y(),0)


    CamPos = vec(0,0,Configurations["Cam Height At Start",number])

    True = 1
    False = 0

    function vector2 centerToEgp(Dreever:entity,Positan:vector2){
      return Positan+(egpScrSize(Dreever)/2)
    }
}

Driver = Chair:driver()
if(clk("reset")){reset()}
if(Chair:driver() == noentity()){
    timer("reset",25)
    EGP:egpClear()
}

EGPSIZE = egpScrSize(Driver)
Active = Driver != noentity()
runOnKeys(Driver,Active)

if(!Active){
    timer("inactivate",250)
}
if(clk("inactivate")){
    Inactive = 1
} else{
    Inactive = 0
}
if(Active == 1 & $Active == 1){
    local Text1 = "They key to go up is the " + Controls["Up",string] + " key." + "\n" + "The key to go down is the " + Controls["Down",string] + " key." + "\n" + "The key to go to the left is the " + Controls["Left",string] + " key." + "\n" + "The key to go right is the " + Controls["Right",string] + " key." + "\n" + "The key to go forward is the " + Controls["Forward",string] + " key." + "\n" + "The key to go backwards is the " + Controls["Back",string] + " key." + "\n" + "The key to fire is the " + Controls["Fire",string] + " key." + "\n" + "The key to move faster is the " + Controls["Speed Up",string] + " key." + "\n" + "The key to toggle shooting in high arcs is the " + Controls["Up Toggle",string] + " key." + "\n" + "The key to toggle low arcs is the " + Controls["Down Toggle",string] + " key." + "\n Made by CochraLogica (https://steamcommunity.com/id/GetLogical/)\nFriend me for any help."
    Chair:hintDriver(Text1,5)
}

if(!Inactive){
    GunE = Gun["Cannon",entity]
    Veloc = GunE:pewSpeed()
    Grav = GunE:pewGravity()
    EPos = GunE:pos()

    if(Driver:keyPressed(Controls["Fire",string])){
        Gun["Fire",number] = 1
    } else{
        Gun["Fire",number] = 0
    }

    if(Driver:keyPressed(Controls["Up Toggle",string])){
        DirectionFlicker = 0
    }
    elseif(Driver:keyPressed(Controls["Down Toggle",string])){
        DirectionFlicker = 1
    }

    if(Driver:keyPressed(Controls["Speed Up",string])){
        UD = (Driver:keyPressed(Controls["Up",string]) - Driver:keyPressed(Controls["Down",string])) * Configurations["Speed Up Speed",number]
        FB = (Driver:keyPressed(Controls["Forward",string]) - Driver:keyPressed(Controls["Back",string])) * Configurations["Speed Up Speed",number]
        LR = (Driver:keyPressed(Controls["Right",string]) - Driver:keyPressed(Controls["Left",string])) * Configurations["Speed Up Speed",number]
    }
    else{
        UD = (Driver:keyPressed(Controls["Up",string]) - Driver:keyPressed(Controls["Down",string])) * Configurations["Base Speed",number]
        FB = (Driver:keyPressed(Controls["Forward",string]) - Driver:keyPressed(Controls["Back",string])) * Configurations["Base Speed",number]
        LR = (Driver:keyPressed(Controls["Right",string]) - Driver:keyPressed(Controls["Left",string])) * Configurations["Base Speed",number]
    }
    #if(!((CamPos + Chair:pos()):isInWorld()) || CamController["Trace",ranger]:distance() > 50000){
    #    CamPos = CamPos + vec(0,0,100)
    #}
    #else{
        CamPos = CamPos + vec(LR,FB,UD)
    #}

    CamController["Activated",number] = Active
    CamController["Angle",angle] = ang(90,90,0)
    CamController["Parent",entity] = Chair
    CamController["Position",vector] = CamPos

    FireLocation = CamController["HitPos",vector]

    Locality = (vec2(FireLocation) - vec2(EPos))
    Dists = vec2( sqrt(Locality:x()^2+Locality:y()^2) , FireLocation:z() - EPos:z() )
    Yaw = wrap(atan(Locality:y(),Locality:x())+180,180)
    AngleU = atan((Veloc^2+sqrt(Veloc^4 - Grav*(Grav*Dists:x()^2+2*Dists:y()*Veloc^2)))/(Grav*Dists:x()))-90
    AngleD = atan((Veloc^2-sqrt(Veloc^4 - Grav*(Grav*Dists:x()^2+2*Dists:y()*Veloc^2)))/(Grav*Dists:x()))-90

    if(DirectionFlicker == False){
        Angles = ang(AngleU,Yaw,0)
    }
    elseif(DirectionFlicker == True){
        Angles = ang(AngleD,Yaw,0)
    }
    
    
    if(vec(Angles):y() > vec(GunE:angles()):y()){
        GunMeanAngles += ang(0,0.3,0)
    }
    elseif(vec(Angles):y() < vec(GunE:angles()):y()){
        GunMeanAngles += ang(0,-0.3,0)
    }
    if(GunE:angles():pitch() < Angles:pitch()){
        GunMeanAngles += ang(0.1,0,0)
    }
    elseif(GunE:angles():pitch() > Angles:pitch()){
        GunMeanAngles += ang(-0.1,0,0)
    }
    
    ###fix the yaw

    GunE:setAng(GunMeanAngles)


    #----------------------------EGP-------------------------#
    EGP:egpDrawTopLeft(False)

    local TypesSelected = Type["Crosshair",string]:lower():explode(" ")

    foreach(K,V:string=TypesSelected){
        if(!perf()){break}
      if(V == "BCircle":lower()){
        local Positron = Positions["BCircle",vector2]
        local Sizotron = Sizes["BCircle",vector]
        local Colorinos = Colors["BCircle",vector4]
        EGP:egpCircleOutline(K,centerToEgp(Driver,Positron),vec2(Sizotron))
        EGP:egpColor(K,Colorinos)
      }
      elseif(V == "ICircle":lower()){
        local Positron = Positions["ICircle",vector2]
        local Sizotron = Sizes["ICircle",vector]
        local Colorinos = Colors["ICircle",vector4]
        EGP:egpCircleOutline(K,centerToEgp(Driver,Positron),vec2(Sizotron))
        EGP:egpColor(K,Colorinos)
      }
      elseif(V == "HLine":lower()){
        local Positron1 = vec2(Positions["HLine",vector4]:x(),Positions["HLine",vector4]:y())
        local Positron2 = vec2(Positions["HLine",vector4]:z(),Positions["HLine",vector4]:w())
        local Colorinos = Colors["HLine",vector4]
        local Sizotron = Sizes["HLine",number]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2))
        EGP:egpSize(K,Sizotron)
        EGP:egpColor(K,Colorinos)
      }
      elseif(V == "VLine":lower()){
        local Positron1 = vec2(Positions["VLine",vector4]:x(),Positions["VLine",vector4]:y())
        local Positron2 = vec2(Positions["VLine",vector4]:z(),Positions["VLine",vector4]:w())
        local Colorinos = Colors["VLine",vector4]
        local Sizotron = Sizes["VLine",number]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2))
        EGP:egpSize(K,Sizotron)
        EGP:egpColor(K,Colorinos)
      }
      elseif(V == "TVBPost":lower()){
        local Sizotron = Sizes["TVBPost",vector4]
        local Positron1 = vec2(Positions["TVBPost",vector4]:x(),Positions["TVBPost",vector4]:y())
        local Positron2 = vec2(Positions["TVBPost",vector4]:z(),Positions["TVBPost",vector4]:w()-Sizotron:w())
        local Colorinos = Colors["TVBPost",vector4]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2-vec2(0,1)))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())

        local TPositron = array(centerToEgp(Driver,Positron2)-vec2(Sizotron:z()/2,0),centerToEgp(Driver,Positron2)+vec2(Sizotron:z()/2,0),centerToEgp(Driver,Positron2)+vec2(0,Sizotron:w()))
        EGP:egpTriangle(K*TypesSelected:count()+K,TPositron[1,vector2],TPositron[2,vector2],TPositron[3,vector2])
        EGP:egpColor(K*TypesSelected:count()+K,Colorinos)
      }
      elseif(V == "TVTPost":lower()){
        local Sizotron = Sizes["TVTPost",vector4]
        local Positron1 = vec2(Positions["TVTPost",vector4]:x(),Positions["TVTPost",vector4]:y())
        local Positron2 = vec2(Positions["TVTPost",vector4]:z(),Positions["TVTPost",vector4]:w()-Sizotron:w())
        local Colorinos = Colors["TVTPost",vector4]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2+vec2(0,1)))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())

        local TPositron = array(centerToEgp(Driver,Positron2)-vec2(Sizotron:z()/2,0),centerToEgp(Driver,Positron2)+vec2(Sizotron:z()/2,0),centerToEgp(Driver,Positron2)+vec2(0,Sizotron:w()))
        EGP:egpTriangle(K*TypesSelected:count()+K,TPositron[1,vector2],TPositron[2,vector2],TPositron[3,vector2])
        EGP:egpColor(K*TypesSelected:count()+K,Colorinos)
      }
      elseif(V == "THLPost":lower()){
        local Sizotron = Sizes["THLPost",vector4]
        local Positron1 = vec2(Positions["THLPost",vector4]:x(),Positions["THLPost",vector4]:y())
        local Positron2 = vec2(Positions["THLPost",vector4]:z()-Sizotron:w(),Positions["THLPost",vector4]:w())
        local Colorinos = Colors["THLPost",vector4]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2+vec2(1,0)))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())

        local TPositron = array(centerToEgp(Driver,Positron2)-vec2(0,Sizotron:z()/2),centerToEgp(Driver,Positron2)+vec2(0,Sizotron:z()/2),centerToEgp(Driver,Positron2)+vec2(Sizotron:w(),0))
        EGP:egpTriangle(K*TypesSelected:count()+K,TPositron[1,vector2],TPositron[2,vector2],TPositron[3,vector2])
        EGP:egpColor(K*TypesSelected:count()+K,Colorinos)
      }
      elseif(V == "THRPost":lower()){
        local Sizotron = Sizes["THRPost",vector4]
        local Positron1 = vec2(Positions["THRPost",vector4]:x(),Positions["THRPost",vector4]:y())
        local Positron2 = vec2(Positions["THRPost",vector4]:z()-Sizotron:w(),Positions["THRPost",vector4]:w())
        local Colorinos = Colors["THRPost",vector4]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2-vec2(1,0)))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())

        local TPositron = array(centerToEgp(Driver,Positron2)-vec2(0,Sizotron:z()/2),centerToEgp(Driver,Positron2)+vec2(0,Sizotron:z()/2),centerToEgp(Driver,Positron2)+vec2(Sizotron:w(),0))
        EGP:egpTriangle(K*TypesSelected:count()+K,TPositron[1,vector2],TPositron[2,vector2],TPositron[3,vector2])
        EGP:egpColor(K*TypesSelected:count()+K,Colorinos)
      }
      elseif(V == "TVBFPost":lower()){
        local Positron1 = vec2(Positions["TVBFPost",vector4]:x(),Positions["TVBFPost",vector4]:y())
        local Positron2 = vec2(Positions["TVBFPost",vector4]:z(),Positions["TVBFPost",vector4]:w())
        local Colorinos = Colors["TVBFPost",vector4]
        local Sizotron = Sizes["TVBFPost",vector]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())
      }
      elseif(V == "TVTFPost":lower()){
        local Positron1 = vec2(Positions["TVTFPost",vector4]:x(),Positions["TVTFPost",vector4]:y())
        local Positron2 = vec2(Positions["TVTFPost",vector4]:z(),Positions["TVTFPost",vector4]:w())
        local Colorinos = Colors["TVTFPost",vector4]
        local Sizotron = Sizes["TVTFPost",vector]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())
      }
      elseif(V == "THLFPost":lower()){
        local Positron1 = vec2(Positions["THLFPost",vector4]:x(),Positions["THLFPost",vector4]:y())
        local Positron2 = vec2(Positions["THLFPost",vector4]:z(),Positions["THLFPost",vector4]:w())
        local Colorinos = Colors["THLFPost",vector4]
        local Sizotron = Sizes["THLFPost",vector]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())
      }
      elseif(V == "THRFPost":lower()){
        local Positron1 = vec2(Positions["THRFPost",vector4]:x(),Positions["THRFPost",vector4]:y())
        local Positron2 = vec2(Positions["THRFPost",vector4]:z(),Positions["THRFPost",vector4]:w())
        local Colorinos = Colors["THRFPost",vector4]
        local Sizotron = Sizes["THRFPost",vector]
        EGP:egpLine(K,centerToEgp(Driver,Positron1),centerToEgp(Driver,Positron2))
        EGP:egpColor(K,Colorinos)
        EGP:egpSize(K,Sizotron:z())
      }
    }
#----------------------------EGP 2-------------------------#
    EGP:egpDrawTopLeft(False)

    local TypesSelected = Type["Heads Up Info",string]:lower():explode(" ")

    foreach(K,V:string=TypesSelected){
      if(V == "XTPos":lower()){
#XTPos

      }
      elseif(V == "YTPos":lower()){
#YTPos

      }
      elseif(V == "ZTPos":lower()){
#ZTPos

      }
      elseif(V == "XPPos":lower()){
#XPPos

      }
      elseif(V == "YPPos":lower()){
#YPPos

      }
      elseif(V == "ZPPos":lower()){
#ZPPos

      }
      elseif(V == "RXTPos":lower()){
#RXTPos

      }
      elseif(V == "RYTPos":lower()){
#RYTPos
      }
      elseif(V == "RZTPos":lower()){
#RZTPos
      }
      elseif(V == "MaxDistance":lower()){
#MaxDistance
      }
      elseif(V == "CurDistance":lower()){
#CurDistance
      }
      elseif(V == "WantedPitchNum":lower()){
#WantedPitchNum
      }
      elseif(V == "CurrentPitchNum":lower()){
##CurrentPitchNum
      }
      elseif(V == "LowPitchNum":lower()){
#LowPitchNum
      }
      elseif(V == "HighPitchNum":lower()){
#HighPitchNum
      }
      elseif(V == "WantedPitchVis":lower()){
#WantedPitchVis
      }
      elseif(V == "CurrentPitchVis":lower()){
#CurrentPitchVis
      }
      elseif(V == "LowPitchVis":lower()){
#LowPitchVis
      }
      elseif(V == "HighPitchVis":lower()){
#HighPitchVis
      }
      elseif(V == "TargetInAreaList":lower()){
#TargetInAreaList
      }
      elseif(V == "TargetInAreaVis":lower()){
#TargetInAreaVis
      }
      elseif(V == "WantedYawNum":lower()){
#WantedYawNum
      }
      elseif(V == "CurrentYawNum":lower()){
#CurrentYawNum
      }
      elseif(V == "WantedYawVis":lower()){
#WantedYawVis
      }
      elseif(V == "CurrentYawVis":lower()){
#CurrentYawVis
      }
    }
}
