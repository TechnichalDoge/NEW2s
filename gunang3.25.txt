@name GunAng3.25
@inputs Gun:wirelink CamController:wirelink Chair:entity EGP:wirelink
@outputs Angles:angle
@persist AngleU:number AngleD:number Angles:angle Target:vector2 Locality:vector2 DistX:number DistY:number EPos:vector Yaw:number Grav:number Veloc:number GunMeanAngles:angle GunMoveSpeed:number
@persist FB:number LR:number UD:number CamSpeed:number CamHeight:number CamPos:vector CamMax:number Chair:entity Active:number Driver:entity DirectionFlicker:number
@persist GunE:entity Fire:number Inactive:number FireLocation:vector
@persist True False EGPSIZE:vector2
@persist Sizes:table Colors:table Positions:table Type:table Controls:table
runOnTick(1)

if(first()||dupefinished()||Chair:driver() == noentity()){
    #Controls
    Controls["Up",string] = "Space"
    Controls["Down",string] = "Shift"
    Controls["Left",string] = "A"
    Controls["Right",string] = "D"
    Controls["Forward",string] = "W"
    Controls["Back",string] = "S"
    Controls["Fire",string] = "MOUSE1"
    Controls["Change Angle",string] = "MOUSE2"

    EGPSIZE = EGP:egpSize()

    # Options are
    # BCircle (a big circle in the center),
    # ICircle ( a smaller circle in center ),
    # HLine (a line horizontally that goes from left to right),
    # VLine ( a verticle line through center from top to bottom)
    # TVBPost ( a tpost coming from Bottom ),
    # TVTPost ( tpost coming from top )
    # THLPost (tpost from left)
    # THRPost (Tpost from right),
    # TVBFPost ( a flat tpost coming from Bottom ),
    # TVTFPost ( flat tpost coming from top )
    # THLFPost (flat tpost from left)
    # THRFPost (flat Tpost from right),
    Type["Crosshair",string] = "BCircle ICircle HLine"

    Sizes["BCircle",vector2] = vec2(20,20)
    Sizes["ICircle",vector2] = vec2(10,10)
    Sizes["TVBPost",vector] = vec2(EGPSIZE:y()/2,-20,5)
    Sizes["TVTPost",vector] = vec2(EGPSIZE:y()/2,-20,5)
    Sizes["THLPost",vector] = vec2(EGPSIZE:x()/2,-20,5)
    Sizes["THRPost",vector] = vec2(EGPSIZE:x()/2,-20,5)
    Sizes["TVBFPost",vector2] = vec2(EGPSIZE:y()/2,-20)
    Sizes["TVTFPost",vector2] = vec2(EGPSIZE:y()/2,-20)
    Sizes["THLFPost",vector2] = vec2(EGPSIZE:x()/2,-20)
    Sizes["THRFPost",vector2] = vec2(EGPSIZE:x()/2,-20)

    Colors["Crosshairs",vector4] = vec4(255,0,0,255)
    Positions["CircleCenters",vector2] = vec2(0,0)
    Positions["TVBPost",vector4] = vec4(0,-EGPSIZE/2,0,Sizes["TVBPost",vector]:y())
    Positions["CircleCenters",vector2] = vec2(0,0)
    Positions["CircleCenters",vector2] = vec2(0,0)
    Positions["CircleCenters",vector2] = vec2(0,0)
    Positions["CircleCenters",vector2] = vec2(0,0)


    CamSpeed = 5
    CamHeight = 1000
    CamPos = vec(0,0,CamHeight)
    True = 1
    False = 0

    function vector2 centerEGPOBJ(TheEgp:wirelink,Pos:vector2){
        local EGPCENTER = TheEgp:egpSize()/2
        return Pos+EGPCENTER
    }
}

Driver = Chair:driver()
Active = Driver != noentity()
runOnKeys(Driver,Active)

if(!Active){
    timer("inactivate",250)
}
if(clk("inactivate")){
    Inactive = 1
} else{
    Inactive = 0
}

if(!Inactive){
    GunE = Gun["Cannon",entity]
    Veloc = GunE:pewSpeed()
    Grav = GunE:pewGravity()
    EPos = GunE:pos()
    CamMax = (Veloc^2)/Grav

    if(Driver:keyPressed(Controls["Fire",string])){
        Gun["Fire",number] = 1
    } else{
        Gun["Fire",number] = 0
    }

    if(Driver:keyPressed(Controls["Change Angle",string])){
        DirectionFlicker += 1
    }
    DirectionFlicker = DirectionFlicker % 2

    if(!((CamPos + Chair:pos()):isInWorld()) || CamController["Trace",ranger]:distance() > 50000){
        CamPos = CamPos + vec(0,0,100)
    }
    elseif(Chair:pos():distance(CamController["HitPos",vector]) < CamMax){
        CamPos = CamPos + vec(LR,FB,UD)
    }

    UD = (Driver:keyPressed(Controls["Up",string]) - Driver:keyPressed(Controls["Down",string])) * CamSpeed
    FB = (Driver:keyPressed(Controls["Forward",string]) - Driver:keyPressed(Controls["Back",string])) * CamSpeed
    LR = (Driver:keyPressed(Controls["Right",string]) - Driver:keyPressed(Controls["Left",string])) * CamSpeed

    CamController["Activated",number] = Active
    CamController["Angle",angle] = ang(90,90,0)
    CamController["Parent",entity] = Chair
    CamController["Position",vector] = CamPos

    FireLocation = CamController["HitPos",vector]

    Locality = (vec2(FireLocation) - vec2(EPos))
    Dists = vec2( sqrt(Locality:x()^2+Locality:y()^2) , FireLocation:z() - EPos:z() )
    Yaw = atan(Locality:y(),Locality:x())+180
    AngleU = atan((Veloc^2+sqrt(Veloc^4 - Grav*(Grav*Dists:x()^2+2*Dists:y()*Veloc^2)))/(Grav*Dists:x()))-90
    AngleD = atan((Veloc^2-sqrt(Veloc^4 - Grav*(Grav*Dists:x()^2+2*Dists:y()*Veloc^2)))/(Grav*Dists:x()))-90

    if(DirectionFlicker == 0){
        Angles = ang(AngleU,Yaw,0)
    }
    elseif(DirectionFlicker == 1){
        Angles = ang(AngleD,Yaw,0)
    }

    if(GunE:angles():yaw() < Angles:yaw()){
        GunMeanAngles += ang(0,0.3,0)
    }
    if(GunE:angles():yaw() > Angles:yaw()){
        GunMeanAngles += ang(0,-0.3,0)
    }
    if(GunE:angles():pitch() < Angles:pitch()){
        GunMeanAngles += ang(0.1,0,0)
    }
    if(GunE:angles():pitch() > Angles:pitch()){
        GunMeanAngles += ang(-0.1,0,0)
    }

    GunE:setAng(GunMeanAngles)


    #----------------------------EGP-------------------------#
    EGP:egpDrawTopLeft(False)

    local TypesSelected = Type["Crosshair",string]:lower():explode(" ")

    foreach(K,V:string=TypesSelected){
      if(V == "BCircle"){

      }
      if(V == "ICircle"){

      }
      if(V == "HLine"){

      }
      if(V == "VLine"){

      }
      if(V == "TVBPost"){

      }
      if(V == "TVTPost"){

      }
      if(V == "THLPost"){

      }
      if(V == "THRPost"){

      }
      if(V == "TVBFPost"){

      }
      if(V == "TVTFPost"){

      }
      if(V == "THLFPost"){

      }
      if(V == "THRFPost"){

      }
    }
    #EGP:egpCircleOutline(1,)





}
