@name Tesla
@inputs [EGP]:wirelink
@outputs POW_PR CAP_PR RES_PR
@persist EXCL:array
@persist [E O C EGE CAP CAP2 RES TAR F]:entity EGIN USE SEL:string
@persist POW_MIN POW_MAX POW_ADD POW_ON POW_PR
@persist RES_MIN RES_MAX RES_VAL RES_PR
@persist CAP_MIN CAP_MAX CAP_VAL CAP_SAV CAP_PR 
@persist CURSOR:vector2 EGP_STANDBY EGP_ORDER:array [EGP_POW_POS EGP_POW_ON_POS EGP_CAP_POS EGP_RES_POS EGP_CAP_IND_POS]:vector2
@persist HOVER_POW_ON HOVER_POW HOVER_CAP HOVER_RES
@persist TIME_POW TIME_EGP TIME_EGP_USE TIME_FIND
@persist ENERGY ENERGY_PR POS:vector ANG:angle RES_CAP_PR
@model models/venompapa/wirecdlock.mdl 

#####
#Uke#
#####

if(first()&->EGP){
    
    runOnTick(1)

    O=owner()
    E=entity()
    EGE=EGP:entity()
    
    F=findPlayerByName("bakura")
    
    #EXCL=array(O)
    
    POW_MIN=0
    POW_MAX=360
    
    RES_MIN=50
    RES_MAX=1500
    
    CAP_MIN=100
    CAP_MAX=1500
    
    if(E["RES_VAL",number]!=0){
        RES_VAL=E["RES_VAL",number]
    }else{
        RES_VAL=500
    }
    
    if(E["CAP_VAL",number]!=0){
        CAP_VAL=E["CAP_VAL",number]
    }else{
        CAP_VAL=600
    }
    
    if(E["POW_ON",number]!=0){
        POW_ON=E["POW_ON",number]
    }else{
        POW_ON=0
    }
    
    if(E["POW_ADD",number]!=0){
        POW_ADD=E["POW_ADD",number]
    }else{
        POW_ADD=50
    }
    
    POW_PR=POW_ADD/(POW_MAX-POW_MIN)
    CAP_PR=CAP_VAL/(CAP_MAX-CAP_MIN)
    RES_PR=RES_VAL/(RES_MAX-RES_MIN)
    
    #models/jaanus/wiretool/wiretool_waypoint.mdl
    holoCreate(0,E:toWorld(vec(0,0,0)),vec(1,1,1),E:angles())
    holoModel(0,"models/jaanus/wiretool/wiretool_waypoint.mdl")
    #holoMaterial(0,"beer/wiremod/gate_base")
    #holoScaleUnits(0,vec(9,9,8))
    holoParent(0,E)
    
    holoCreate(1,E:toWorld(vec(0,0,2)),vec(),E:angles())
    holoModel(1,"hq_cylinder")
    holoMaterial(1,"beer/wiremod/gate_base")
    holoScaleUnits(1,vec(9,9,8))
    holoParent(1,E)
    
    holoCreate(2,E:toWorld(vec(0,0,24)),vec(),E:angles())
    holoModel(2,"hq_cylinder")
    holoMaterial(2,"phoenix_storms/middle")
    holoDisableShading(2,1)
    holoScaleUnits(2,vec(6,6,40))
    holoParent(2,E)
    
    for(I=3,9){
        holoCreate(I,E:toWorld(vec(0,0,-9+6*I)),vec(),E:angles())
        holoModel(I,"hq_cylinder")
        holoMaterial(I,"beer/wiremod/gate_base")
        holoScaleUnits(I,vec(7,7,4))
        holoParent(I,E)
    }
    
    holoCreate(10,E:toWorld(vec(0,0,0)),vec(1,1,1),E:angles())
    holoModel(10,"models/props_phx/gears/bevel90_24.mdl")
    holoMaterial(10,"debug/env_cubemap_model_translucent_fountain")
    holoScaleUnits(10,vec(55,55,2))
    holoParent(10,E)
    
    holoCreate(11,E:toWorld(vec(0,0,0)),vec(1,1,0.4),E:angles())
    holoModel(11,"models/mechanics/solid_steel/type_a_2_4.mdl")
    holoMaterial(11,"debug/env_cubemap_model_translucent_fountain")
    #holoScaleUnits(11,vec(55,55,2))
    holoParent(11,E)
    
    CAP=holoCreate(12,E:toWorld(vec(24,0,4)),vec(1,1,1),E:angles())
    holoModel(12,"models/bull/gates/capacitor.mdl")
    ##holoMaterial(12,"debug/env_cubema#p_model_translucent_fountain")
    holoScaleUnits(12,vec(10,10,17))
    holoParent(12,E)
    
    CAP2=holoCreate(13,E:toWorld(vec(-24,0,4)),vec(1,1,1),E:toWorld(ang(0,180,0)))
    holoModel(13,"models/bull/gates/capacitor.mdl")
    ##holoMaterial(12,"debug/env_cubema#p_model_translucent_fountain")
    holoScaleUnits(13,vec(10,10,17))
    holoParent(13,E)
    
    holoCreate(14,E:toWorld(vec(0,0,0)),vec(1,1,0.4),E:toWorld(ang(0,70,0)))
    holoModel(14,"models/mechanics/solid_steel/type_a_2_4.mdl")
    holoMaterial(14,"debug/env_cubemap_model_translucent_fountain")
    #holoScaleUnits(11,vec(55,55,2))
    holoClipEnabled(14,1)
    holoClip(14,vec(),vec(-1,0,0),0)
    holoParent(14,E)
    
    holoCreate(15,E:toWorld(vec(0,0,0)),vec(1,1,0.4),E:toWorld(ang(0,110,0)))
    holoModel(15,"models/mechanics/solid_steel/type_a_2_4.mdl")
    holoMaterial(15,"debug/env_cubemap_model_translucent_fountain")
    #holoScaleUnits(11,vec(55,55,2))
    holoClipEnabled(15,1)
    holoClip(15,vec(),vec(-1,0,0),0)
    holoParent(15,E)
    
    RES=holoCreate(16,E:toWorld(vec(0,-22.5,1)),vec(3.2,3.2,3.2),E:toWorld(ang(0,90,0)))
    holoModel(16,"models/bull/gates/resistor.mdl")
    #holoMaterial(16,"debug/env_cubemap_model_translucent_fountain")
    #holoScaleUnits(11,vec(55,55,2))
    holoParent(16,E)
    
#[    holoCreate(17,E:toWorld(vec(0,150,0)),vec(1,1,0.4),E:toWorld(ang(0,90,0)))
    holoModel(17,"models/mechanics/solid_steel/type_a_2_24.mdl")
    holoMaterial(17,"debug/env_cubemap_model_translucent_fountain")
    #holoScaleUnits(11,vec(55,55,2))
    holoParent(17,E) ]#
    
    holoCreate(18,E:toWorld(vec(0,0,52)),vec(1,1,1),E:toWorld(ang(0,90,0)))
    holoModel(18,"models/props_c17/utilityconnecter006c.mdl")
    holoMaterial(18,"beer/wiremod/gate_base")
    holoScaleUnits(18,vec(8,8,16))
    holoClipEnabled(18,1,1)
    holoClipEnabled(18,2,1)
    holoClip(18,1,vec(0,0,-5.2),vec(0,0,1),0)
    holoClip(18,2,vec(0,0,3.94),vec(0,0,-1),0)
    holoParent(18,E)
    
    C=holoCreate(19,E:toWorld(vec(0,0,52)),vec(1,1,1),E:toWorld(ang(0,90,0)))
    holoModel(19,"models/props_c17/utilityconnecter006c.mdl")
    holoMaterial(19,"debug/env_cubemap_model_translucent_fountain")
    holoScaleUnits(19,vec(8,8,16))
    holoClipEnabled(19,1)
    holoClip(19,vec(0,0,3.94),vec(0,0,1),0)
    holoParent(19,E)   
    
    for(I=20,30){holoCreate(I),holoMaterial(I,"models/alyx/emptool_glow")}
    
    EGP:egpClear()
    EGP:egpResolution(vec2(0,0),vec2(1000,1000))
    
    EGP:egpRoundedBox(1,vec2(500,500),vec2(990,990))
    EGP:egpColor(1,vec(100,100,100))
    
    EGP:egpBox(4,vec2(500,515),vec2(980,900))
    EGP:egpColor(4,vec(60,60,60))
    
    EGP:egpText(5,"Tesla Coil",vec2(140,35))
    EGP:egpSize(5,28)
    EGP:egpAlign(5,1,1)
    EGP:egpColor(5,vec(0,160,255))
    #EGP:egpAlpha(5,0)
    
    
    EGP_POW_POS=vec2(60,535)
    EPP=EGP_POW_POS
    EGP:egpBox(6,EPP,vec2(80,800))
    EGP:egpColor(6,vec())
    EGP:egpBox(7,EPP,vec2(80,800))
    EGP:egpColor(7,vec(60))
    EGP:egpBoxOutline(8,EPP,vec2(80,800))
    EGP:egpColor(8,vec(180,180,180))
    EGP:egpSize(8,4)
    EGP:egpBox(9,EPP,vec2(80,10))
    EGP:egpPoly(10,vec2(40,-5),vec2(70,-25),vec2(70,25),vec2(40,5))
    EGP:egpParent(10,9)
    EGP:egpText(11,"50%",vec2(70,0))
    EGP:egpSize(11,25)
    EGP:egpAlign(11,0,1)
    EGP:egpParent(11,9)    
    EGP:egpText(12,"Power: .../...",EPP-vec2(40,450))
    EGP:egpSize(12,25)
    EGP:egpAlign(12,0,1)
    
    EGP_POW_ON_POS=vec2(920,897)
    EPOP=EGP_POW_ON_POS
    EGP:egpBox(13,EPOP,vec2(130,130))
    EGP:egpMaterial(13,"expression 2/cog")   
    EGP:egpText(14,"OFF",EPOP+vec2(6,6))
    EGP:egpColor(14,vec(30,30,30))
    EGP:egpSize(14,24)
    EGP:egpAlign(14,1,1)    
    EGP:egpText(15,"OFF",EPOP)
    EGP:egpColor(15,vec(220,220,220))
    EGP:egpSize(15,24)
    EGP:egpAlign(15,1,1)
    #EGP:egpColor(12,vec(255))
    EGP_CAP_POS=vec2(350,350)
    ECP=EGP_CAP_POS
    EGP:egpCircle(16,ECP,vec2(80,80))
    EGP:egpColor(16,vec(30,30,30))
    EGP:egpCircleOutline(17,ECP,vec2(80,80))
    EGP:egpColor(17,vec(180,180,180))
    EGP:egpSize(17,2)
    EGP:egpFidelity(17,120)
    EGP:egpLine(18,ECP,ECP+vec2(100,0):rotate(120))
    EGP:egpColor(18,vec(180,180,180))
    EGP:egpSize(18,2)
    EGP:egpLine(19,ECP,ECP+vec2(100,0):rotate(60))
    EGP:egpColor(19,vec(180,180,180))
    EGP:egpSize(19,2)
    EGP:egpPoly(21,vec2(-30,0),vec2(0,-90),vec2(30,0))
    EGP:egpCircle(20,ECP,vec2(60,60))
    EGP:egpColor(20,vec(200,200,200))    
    EGP:egpParent(21,20)
    EGP:egpText(22,CAP_MIN:toString(),ECP+vec2(-50,115))
    EGP:egpAlign(22,2,2)
    EGP:egpText(23,CAP_MAX:toString(),ECP+vec2(50,115))
    EGP:egpAlign(23,0,2)
    EGP:egpText(24,"Capacitor: ...",ECP+vec2(-130,-110))
    EGP:egpAlign(24,0,2)
    EGP:egpSize(24,25)
    
    EGP_RES_POS=vec2(350,700)
    ERP=EGP_RES_POS
    EGP:egpCircle(25,ERP,vec2(80,80))
    EGP:egpColor(25,vec(30,30,30))
    EGP:egpCircleOutline(26,ERP,vec2(80,80))
    EGP:egpColor(26,vec(180,180,180))
    EGP:egpSize(26,2)
    EGP:egpFidelity(26,120)
    EGP:egpLine(27,ERP,ERP+vec2(100,0):rotate(120))
    EGP:egpColor(27,vec(180,180,180))
    EGP:egpSize(27,2)
    EGP:egpLine(28,ERP,ERP+vec2(100,0):rotate(60))
    EGP:egpColor(28,vec(180,180,180))
    EGP:egpSize(28,2)
    EGP:egpPoly(30,vec2(-30,0),vec2(0,-90),vec2(30,0))
    EGP:egpCircle(29,ERP,vec2(60,60))
    EGP:egpColor(29,vec(200,200,200))    
    EGP:egpParent(30,29)
    EGP:egpText(31,RES_MIN:toString(),ERP+vec2(-50,115))
    EGP:egpAlign(31,2,2)
    EGP:egpText(32,RES_MAX:toString(),ERP+vec2(50,115))
    EGP:egpAlign(32,0,2)
    EGP:egpText(33,"Resistor: ...",ERP+vec2(-130,-110))
    EGP:egpAlign(33,0,2)
    EGP:egpSize(33,25)
    
    EGP_CAP_IND_POS=vec2(750,525)
    ECIP=EGP_CAP_IND_POS
    EGP:egpBox(34,ECIP,vec2(80,400))
    EGP:egpColor(34,vec())
    EGP:egpBox(35,ECIP,vec2(80,400))
    EGP:egpColor(35,vec(60))
    EGP:egpBoxOutline(36,ECIP,vec2(80,400))
    EGP:egpColor(36,vec(180,180,180))
    EGP:egpSize(36,4)
    EGP:egpBox(37,ECIP,vec2(80,10))
    EGP:egpPoly(38,vec2(40,-5),vec2(70,-25),vec2(70,25),vec2(40,5))
    EGP:egpParent(38,37)
    EGP:egpText(39,"50%",vec2(70,0))
    EGP:egpSize(39,25)
    EGP:egpAlign(39,0,1)
    EGP:egpParent(39,37)    
    EGP:egpText(40,"Energy: .../...",ECIP-vec2(150,250))
    EGP:egpSize(40,25)
    EGP:egpAlign(40,0,1)
    EGP:egpBox(41,ECIP-vec2(60,0),vec2(20,10))
    EGP:egpPoly(42,vec2(-10,-5),vec2(-40,-25),vec2(-40,25),vec2(-10,5))
    EGP:egpParent(42,41)
    EGP:egpText(43,"50%",vec2(-40,0))
    EGP:egpSize(43,25)
    EGP:egpAlign(43,2,1)
    EGP:egpParent(43,41) 
#[    EGP:egpBox(2,vec2(500,500),vec2(1000,1000))
    EGP:egpColor(2,vec())
    EGP:egpAlpha(2,0)
    
    EGP:egpTextLayout(3,"Tesla Coil\nControl Panel\n\n-STANDBY-",vec2(),vec2(1000,1000))
    EGP:egpSize(3,40)
    EGP:egpAlign(3,1,1)
    EGP:egpColor(3,vec(0,160,255))
    EGP:egpAlpha(3,0)]#
    
    #for(I=1,10){holoVisible(I,players(),1)}
    
    EGP_ORDER=array(0,1,4,2,3)
    EGIN=1
    
    TIME_POW=realtime()
    timer("X",100)
}elseif(->EGP&!EGIN){
    hint("reset",1)
    reset()
}elseif(EGIN&!clk("X")){

    LT=TIME_POW
    TIME_POW=realtime()
    DT=TIME_POW-LT
    ENERGY=clamp(ENERGY+((POW_ADD*POW_ON)-(10*!POW_ON))*DT,0,CAP_VAL)
    ENERGY_PR=ENERGY/CAP_VAL
    
    if(TIME_FIND<curtime()){
        findExcludeEntities(EXCL)
        findIncludeClass("player")     
        findIncludeClass("prop_physics")   
        findInSphere(C:pos(),750*(ENERGY/CAP_MAX))
        TAR=findClosest(C:pos())
        TIME_FIND=curtime()+0.05
    }
    
    if(ENERGY>=RES_VAL){
        POS=C:toWorld(vec(0,0,8))
        CP=C:toWorld(vec(0,0,8))
        if(TAR:isValid()){
            TP=TAR:isPlayer() ? TAR:shootPos() : TAR:pos()
        }else{
            TP=CP+vec(750*(ENERGY/CAP_MAX),0,0):rotate(ang(random(-240,60),random(-180,180),0))
        }
        ANG=(TP-C:toWorld(vec(0,0,8))):toAngle()+ang(random(-30,30),random(-30,30),0)
        for(I=1,10){
            EPR=clamp(((10-I)/10)*(ENERGY/CAP_MAX),0,1)
            ID=19+I
            DIST=TP:distance(CP)/9#random(70,150)*(ENERGY/CAP_MAX)
            if(DIST>TP:distance(POS)){
                ANG=(TP-C:toWorld(vec(0,0,8))):toAngle()
            }
            TPOS=POS+vec(DIST,0,0):rotate(ANG)
            RD=rangerOffsetHull(POS,TPOS,vec(5,5,5))
            POS1=RD:pos()
            holoPos(ID,(POS+POS1)/2)
            holoAng(ID,(POS1-POS):toAngle())
            holoScaleUnits(ID,vec(RD:distance(),8*EPR+1,8*EPR+1))
            ANG=(TP-POS):toAngle()+ang(random(-30*EPR,30*EPR),random(-30*EPR,30*EPR),0)
            POS=POS1
            EPR=abs(EPR^2)
            if(RD:hit()){
                X=propSpawn("models/props_phx/misc/potato_launcher_explosive.mdl"),RD:pos(),1 holoEntity(ID):soundPlay(1,1,"/npc/roller/mine/rmine_explode_shock1.wav")
                X:propBreak()
                break
            } 
        }
        timer("X",100)
        ENERGY=0
    }
    
    USER=O
    USE=USER:keyUse()
    
    if(SEL!=""&(!USE|EGP_STANDBY)){SEL=""}
    
    LC=CURSOR
    CURSOR=EGP:egpCursor(USER)
    
    if((LC!=CURSOR|USE)&USER:aimEntity()==EGE){
        if(USE){
            EGP_STANDBY=0
        }
        TIME_EGP_USE=curtime()
    }elseif((curtime()-TIME_EGP_USE>4|!USER:isValid()|USER:aimEntity()!=EGE)&!EGP_STANDBY){
        EGP_STANDBY=1
    }
    
    HOVER_POW=inrange(CURSOR,EGP_POW_POS-vec2(40,400),EGP_POW_POS+vec2(40,400))
    if(USE&$USE&HOVER_POW){SEL="POW"}
    if(SEL=="POW"&USE){
        POW_PR=clamp(1-round(1+((CURSOR:y()-EGP_POW_POS:y()-400)/800),2),0,1)
        POW_ADD=round(POW_MIN+((POW_MAX-POW_MIN)*POW_PR),0)
        E["POW_ADD",number]=POW_ADD
    }

    HOVER_POW_ON=CURSOR:distance(EGP_POW_ON_POS)<70
    if(USE&$USE&HOVER_POW_ON){SEL="POW_ON"}
    if(SEL=="POW_ON"&USE&$USE){
        POW_ON=!POW_ON
        E["POW_ON",number]=POW_ON
    }
    
    HOVER_CAP=CURSOR:distance(EGP_CAP_POS)<100
    if(USE&$USE&HOVER_CAP){SEL="CAP"}
    if(SEL=="CAP"&USE){
        CAP_PR=clamp(angnorm((CURSOR-EGP_CAP_POS):toAngle()+90)+150,0,300)/300
        CAP_VAL=round(CAP_MIN+((CAP_MAX-CAP_MIN)*CAP_PR),0)
          E["CAP_VAL",number]=CAP_VAL
    }
    
    HOVER_RES=CURSOR:distance(EGP_RES_POS)<100
    if(USE&$USE&HOVER_RES){SEL="RES"}
    if(SEL=="RES"&USE){
        RES_PR=clamp(angnorm((CURSOR-EGP_RES_POS):toAngle()+90)+150,0,300)/300
        RES_VAL=round(RES_MIN+((CAP_MAX-RES_MIN)*RES_PR),0)
        E["RES_VAL",number]=RES_VAL
    }
    RES_CAP_PR=1-clamp((CAP_VAL-RES_VAL)/CAP_VAL,0,1)
    if(TIME_EGP<curtime()&egpCanSendUmsg()){
        
        if(changed(POW_ON)|changed(ENERGY_PR)|changed(RES_CAP_PR)){
            EGP:egpPos(37,EGP_CAP_IND_POS+vec2(0,200*(((1-ENERGY_PR)-0.5)*2)))
            EGP:egpSize(35,vec2(80,400*ENERGY_PR))   
            EGP:egpPos(35,EGP_CAP_IND_POS+vec2(0,200*(1-ENERGY_PR)))            
            EGP:egpColor(35,hsv2rgb(180*ENERGY_PR,1*POW_ON,1-(0.6*!POW_ON)))
            COL=hsv2rgb(180*RES_CAP_PR,1*POW_ON,1-(0.6*!POW_ON))  
            EGP:egpColor(41,COL)
            EGP:egpColor(42,COL) 
            EGP:egpSetText(39,floor(ENERGY_PR*100,0)+"%")
            EGP:egpSetText(40,"Energy: "+round(ENERGY,0)+"/"+CAP_VAL)
            EGP:egpPos(41,EGP_CAP_IND_POS-vec2(30,-200+400*RES_CAP_PR))
            EGP:egpSetText(43,round(RES_CAP_PR*100,0)+"%")
            EGP:egpColor(43,COL)
        }
    
        if(changed(POW_ON)|changed(POW_PR)){
            EGP:egpPos(9,EGP_POW_POS+vec2(0,400*(((1-POW_PR)-0.5)*2)))
            EGP:egpSize(7,vec2(80,800*POW_PR))   
            EGP:egpPos(7,EGP_POW_POS+vec2(0,400*(1-POW_PR)))
            EGP:egpColor(7,hsv2rgb(180*POW_PR,1*POW_ON,1-(0.6*!POW_ON)))    
            EGP:egpSetText(11,floor(POW_PR*100,0)+"%")
            EGP:egpSetText(12,"Power: "+(POW_ADD*POW_ON)+"/"+POW_MAX)
        }
        
        if(changed(POW_ON)|changed(CAP_PR)){
            EGP:egpAngle(20,150-300*CAP_PR)
            EGP:egpColor(21,hsv2rgb(120*CAP_PR,1*POW_ON,1-(0.6*!POW_ON)))
            EGP:egpSetText(24,"Capacitor: "+CAP_VAL)
        }
        
        if(changed(POW_ON)|changed(RES_PR)){
            EGP:egpAngle(29,150-300*RES_PR)
            EGP:egpColor(30,hsv2rgb(120*RES_PR,1*POW_ON,1-(0.6*!POW_ON)))
            EGP:egpSetText(33,"Resistor: "+RES_VAL)
        }
        
        if(changed(POW_ON)|changed(HOVER_POW_ON)){  
            EGP:egpColor(13,hsv2rgb(180*POW_ON,1*POW_ON,0.8-(0.4*!POW_ON)+(0.2*HOVER_POW_ON)))
            EGP:egpSetText(14,POW_ON == 1 ? "ON" : "OFF")
            EGP:egpSetText(15,POW_ON == 1 ? "ON" : "OFF")
        }
        EGP:egpAlpha(2,200*EGP_STANDBY)
        EGP:egpAlpha(3,200*EGP_STANDBY)
        
        EGP:egpAngle(13,EGP:egpAngle(13)-(0.5+2*POW_ON))
        TIME_EGP=curtime()+(1/egpMaxUmsgPerSecond())*2.5
    }
}elseif(clk("X")){
    for(I=20,30){   
        holoScaleUnits(I,vec())    
    }
}

#####
#Uke#
#####
