@name Targeting
@inputs Base:entity Gunnerleft:entity Gunnerright:entity GLshift GLspace
@outputs Vecleft:vector #[Vecright:vector]# Name:string Ar:array
@persist BA:angle Co:entity Angle:angle I Output:array Tne:number Vecl:vector Vecr:vector
interval(250)

if (first()|dupefinished()) {
Co=findPlayerBySteamID("STEAM_0:0:56411356")
BA=Base:angles()
findInSphere(Base:pos(),10000)
findIncludeClass("1_ent:player")
findExcludePlayer(owner())
findExcludePlayer(Co)
findExcludePlayer(Gunnerleft)
findExcludePlayer(Gunnerright)
Ar=findToArray()
    for(I=1,Ar:count()) {
        if (perf()) {
        Ply = players()[I,entity]
        if(!Ply:plyHasGod()){
            Output:pushEntity(Ply)
        }
    }
    }
}

if(changed(GLspace) & GLspace){
        Tne++
    }
elseif(changed(GLshift) & GLshift){
Tne--
}

 Name=Ar[Tne,entity]:name()
 Vecl=Ar[Tne,entity]:pos()
 #Vecr=Ar[Tne,entity]:pos()

Angle=Base:heading(Vecl)
#Angle=Base:heading(Vecr)
if(Angle>BA){
    Vecleft=Vecl
    }
else{
 Tne+1
}
if(Tne==players():count()|Tne>players():count()){
 Tne=0
}
