@name  MapSizer
@outputs Vectors:array MaxMapSize:vector2
@persist Curpos:vector #[X:number Y:number Z:number]# Vectors:array LastX:number LastY:number LastZ:number LastInd:number MaxMapSize:vector2 Finished:number
local MAxMAx = 32768
MaxMapSize = vec2(-32768/2,32768/2)
local Maximums vec(MaxMapSize:y(),MaxMapSize:y(),MaxMapSize:y())
LastInd = 0
LastX = MaxMapSize:x()
LastY = MaxMapSize:x()
LastZ = MaxMapSize:x()
timer("Start",15)
function number threedtoindex( Vr:vector , Maxindvector:vector ) {
    return ( (Vr:z()+MaxMapSize:y()) * ( (Maxindvector:x() ) * ( Maxindvector:y() ) ) + ( (Vr:y()+MaxMapSize:y())) * (Maxindvector[1]) + (Vr:x()+MaxMapSize:y())) ) )
}
function vector indextothreed( Vr:vector , Maxindvector:vector ) {
    return ( (Vr:z()+MaxMapSize:y()) * ( (Maxindvector:x() ) * ( Maxindvector:y() ) ) + ( (Vr:y()+MaxMapSize:y())) * (Maxindvector[1]) + (Vr:x()+MaxMapSize:y())) ) )
}
e2function number toIndex3D(vector vec, vector maxWidthandHeightandDepth)
    
if(clk("Start")){
    
    for(X=LastX,MaxMapSize:y(),500){    
        if(!perf()){
            LastX = X
            break
        }
        for(Y=LastY,MaxMapSize:y(),500){    
            if(!perf()){
                LastY = Y
                break
            }
            for(Z=LastZ,MaxMapSize:y(),500){       
            if(!perf()){
                LastX = X
                LastY = Y
                LastZ = Z
                break
            }
                entity():setName(X+", "+Y+", "+Z)
                if(vec(X,Y,Z):isInWorld()){
                    Vectors:pushVector(vec(X,Y,Z))
                }
                if(vec(X,Y,Z) == vec(MaxMapSize:y(),MaxMapSize:y(),MaxMapSize:y())){
                    Finished =1    
                }
            }
        }    
    }   
    for(X=LastX,MaxMapSize:y(),500){    
        if(!perf()){
            LastX = X
            break
        }
        for(Y=LastY,MaxMapSize:y(),500){    
            if(!perf()){
                LastY = Y
                break
            }
            for(Z=LastZ,MaxMapSize:y(),500){       
            if(!perf()){
                LastX = X
                LastY = Y
                LastZ = Z
                break
            }
                entity():setName(X+", "+Y+", "+Z)
                if(vec(X,Y,Z):isInWorld()){
                    Vectors:pushVector(vec(X,Y,Z))
                }
                if(vec(X,Y,Z) == vec(MaxMapSize:y(),MaxMapSize:y(),MaxMapSize:y())){
                    Finished =1    
                }
            }
        }    
    }
if(!Finished){
    timer("Start",15)     
}else{
    timer("sort",15)
}
}
#[
@name EGP Console Screen nonCompatible
@inputs XCursor:number YCursor:number Clk:number Value:string 
@outputs OutValue:string
@persist EGP:wirelink SizeX SizeY Memory:array LoopMax LoopStart
@persist SelectedIndex:number

if(first()){
    EGP = entity():isConstrainedTo():wirelink()
    EGP:egpClear()
    

    function number findIndex3d(XPos,YPos){
        return YPos * (SizeX) + XPos
    }
    function vector2 findPos3d(Index:number){
        return vec2(Index%SizeX,floor(Index/SizeX))
    }

    LoopMax = findIndex(SizeX,SizeY)
    LoopStart = 0
    timer("loopnext",1)
}

if (clk("loopnext")) #legokidlogam
{
    if (LoopMax - LoopStart > 10)
    {
        for (I = LoopStart, LoopStart + 10)
        {
            Memory[I,string] = " "
            EGP:egpText(I+1,Memory[I,string],vec2(mapNum(findPos(I):x(),0,SizeX,0,EGP:egpSize():x(),0),mapNum(findPos(I):y(),0,SizeY,0,EGP:egpSize():y(),0)))
        }
        LoopStart += 11
        timer("loopnext",1)
    }
    elseif (LoopMax - LoopStart < 1)
    {
        timer("run",25)
    }
    else
    {
        for (I = LoopStart, LoopMax)
        {
            Memory[I,string] = " "
            EGP:egpText(I+1,Memory[I,string],vec2(mapNum(findPos(I):x(),0,SizeX,0,EGP:egpSize():x(),0),mapNum(findPos(I):y(),0,SizeY,0,EGP:egpSize():y(),0)))
        }
        LoopStart = LoopMax + 1
        timer("loopnext",1)
    }
}

#print(vec2(5,10))
#print(findIndex(5,10))
#print(findPos(findIndex(5,10)))

if(clk("run")){
    SelectedIndex = findIndex(XCursor,YCursor)
    timer("cursorAnim1",450)
    OutValue = Memory[SelectedIndex,string]
    if(Clk){
        Memory[SelectedIndex,string] = Value   
        EGP:egpSetText(SelectedIndex+1,Value) 
    }
    EGP:egpSetText(SelectedIndex+1,Memory[SelectedIndex,string])
    timer("run",25)
}

if(clk("cursorAnim1")){
    EGP:egpSetText(SelectedIndex+1,"|")
    timer("cursorAnim2",25)
}

if(clk("cursorAnim2")){
    EGP:egpSetText(SelectedIndex+1,Memory[SelectedIndex,string])
}
